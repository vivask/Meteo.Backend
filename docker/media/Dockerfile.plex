ARG GO_VERSION=1.20

FROM golang:${GO_VERSION}-alpine as gobuilder
ENV GIN_MODE=release
#RUN apk add --no-cache git
WORKDIR /app

ADD ./go.mod /app/go.mod
ADD ./go.sum /app/go.sum
RUN go mod download

ADD . /app
RUN CGO_ENABLED=0 go build -installsuffix 'static' -o ./media ./cmd/media
RUN CGO_ENABLED=0 go build -installsuffix 'static' -o ./healthy ./cmd/healthy
RUN CGO_ENABLED=0 go build -installsuffix 'static' -o ./flactool ./cmd/flactool

FROM ghcr.io/linuxserver/baseimage-ubuntu:jammy
ENV GIN_MODE=release
RUN apt update && apt install tzdata -y
ENV TZ="Europe/Minsk"

########################
# FLACTOOL #
# install build packages
RUN \
  echo "**** install runtime packages ****" && \
  apt update && \
  apt install \
  git \
  curl \
  g++ \
  gcc \
  libxml2-dev \
  cmake \
  make -y
# install runtime packages
RUN \
  echo "**** install flactool ****" && \
  apt install \
  libxml2 \
  mc \
  ffmpeg \
  sox \
  flac -y
# compile shntool
RUN mkdir -p \
  /tmp/shntool && \
curl -o \
  /tmp/shntool-src-tar.gz -L \
  http://shnutils.freeshell.org/shntool/dist/src/shntool-3.0.10.tar.gz && \
tar xf /tmp/shntool-src-tar.gz -C \
  /tmp/shntool --strip-components=1 && \
cd /tmp/shntool && \
./configure \
  --infodir=/usr/share/info \
  --localstatedir=/var \
  --mandir=/usr/share/man \
  --prefix=/usr \
  --sysconfdir=/etc && \
make && \
make install && \
# compile sacd_extract
cd /root &&\
git clone https://github.com/sacd-ripper/sacd-ripper.git && \
cd sacd-ripper/tools/sacd_extract/ && \
cmake . && \
make && \
cp ./sacd_extract /bin/sacd_extract

########################
# TRANSMISSION #
RUN \
  echo "**** install transmission ****" && \
  apt install transmission-daemon transmission-cli -y
RUN useradd -d /tmp -r -M -G users transmission && \
usermod -aG debian-transmission transmission
ADD ./docker/media/settings.json /etc/transmission-daemon/settings.json
RUN echo 'net.core.rmem_max=4194304' >> /etc/sysctl.conf \
  && echo 'net.core.wmem_max=1048576' >> /etc/sysctl.conf
EXPOSE 9091/tcp 51413

########################
# SAMBA #
RUN \
  echo "**** install samba ****" && \
  apt install samba samba-common-bin smbclient -y
RUN useradd -d /tmp -r -M -G users smbuser \
  && mkdir -p /media/samba
RUN --mount=type=secret,id=samba_env,dst=/run/secrets/samba_env export SMB_PASS=$(cat /run/secrets/samba_env) \
  && echo "${SMB_PASS}\n${SMB_PASS}" | smbpasswd -a -s smbuser
COPY ./docker/media/smb.conf /etc/samba/smb.conf
EXPOSE 137/udp 138/udp 139 445

########################
# PLEX #
ARG PLEX_RELEASE
# global environment settings
ENV DEBIAN_FRONTEND="noninteractive" \
  PLEX_DOWNLOAD="https://downloads.plex.tv/plex-media-server-new" \
  PLEX_ARCH="amd64" \
  PLEX_MEDIA_SERVER_APPLICATION_SUPPORT_DIR="/config/Library/Application Support" \
  PLEX_MEDIA_SERVER_HOME="/usr/lib/plexmediaserver" \
  PLEX_MEDIA_SERVER_MAX_PLUGIN_PROCS="6" \
  PLEX_MEDIA_SERVER_USER="abc" \
  PLEX_MEDIA_SERVER_INFO_VENDOR="Docker" \
  PLEX_MEDIA_SERVER_INFO_DEVICE="Docker Container (LinuxServer.io)"
RUN \
  echo "**** install runtime packages ****" && \
  apt install -y \
    jq \
    udev \
    unrar \
    wget && \
  echo "**** install plex ****" && \
  if [ -z ${PLEX_RELEASE+x} ]; then \
    PLEX_RELEASE=$(curl -sX GET 'https://plex.tv/api/downloads/5.json' \
      | jq -r '.computer.Linux.version'); \
  fi && \
  curl -o \
    /tmp/plexmediaserver.deb -L \
    "${PLEX_DOWNLOAD}/${PLEX_RELEASE}/debian/plexmediaserver_${PLEX_RELEASE}_${PLEX_ARCH}.deb" && \
  dpkg -i /tmp/plexmediaserver.deb && \
  echo "**** ensure abc user's home folder is /app ****" && \
  usermod -d /app abc && \
	usermod -aG users abc
# add local files
COPY ./docker/media/root/ /
# ports and volumes
EXPOSE 32400/tcp 1900/udp 3005/tcp 5353/udp 8324/tcp 32410/udp 32412/udp 32413/udp 32414/udp 32469/tcp
VOLUME /config

# CLEANUP
RUN apt remove \
  git \
  curl \
  g++ \
  gcc \
  libxml2-dev \
  cmake \
  make -y && \
apt clean autoclean && \
apt autoremove --yes && \
rm -rf /var/lib/{apt,dpkg,cache,log}/ && \
rm -rf \
  /etc/default/plexmediaserver \
  /root/* \
	/var/lib/apt/lists/* \
  /tmp/* \
  /var/tmp/* \
  /usr/lib/*.la

COPY --from=gobuilder /app/media /bin/media
COPY --from=gobuilder /app/healthy /bin/healthy
COPY --from=gobuilder /app/flactool /bin/flactool
